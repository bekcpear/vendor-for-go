#!/usr/bin/env bash
#
# @author: cwittlut <i@bitbili.net>
#

_help() {
  echo "
Usage: $(basename $0) [<PKG-DIR>] [<PKG-VERSION>] [<OPTS>...]

  If no <PKG-DIR> provided, the current path will be used.
  If no <PKG-VERSION> provided, this script will skip git actions.

    -p  <path>        The parent path of the output 'vendor' (the VCS dir)
                       if omitted, it defaults to <PKG-DIR>,
                                   and other actions of this script will be ignored
    -P                Flag the <path> above is a parent path of the VCS dir,
                       and the VCS path will be generated by the module path
    -u  [<args>]      auto push to upstream with optional <args> (quote them)
    -g  <ver>         Update the go directive to the indicated version
    -v                Verbose output
"
}

set +e
unset GETOPT_COMPATIBLE
getopt -T
if [[ ${?} != 4 ]]; then
  echo "The command 'getopt' of Linux version is necessory to parse parameters." >&2
  exit 1
fi
_ARGS=$(getopt -o 'g:p:u::Pv' -- "$@")
if [[ ${?} != 0 ]]; then
  _help
  exit 1
fi
set -e

_PUSH_ARGS="--follow-tags"
eval "set -- ${_ARGS}"
while :; do
  case "${1}" in
    -g)
      shift
      _GO_VER="${1}"
      shift
      ;;
    -p)
      shift
      _VCS_DIR="$(realpath ${1})"
      shift
      ;;
    -u)
      _PUSH="1"
      shift
      _PUSH_ARGS+=" ${1}"
      shift
      ;;
    -P)
      shift
      _AUTOGEN=1
      ;;
    -v)
      shift
      _VERBOSE=1
      ;;
    --)
      shift
      break
      ;;
  esac
done

_MOD_DIR="${1}"
_VERSION="${2}"

_O_REDIRECT="/dev/null"
if [[ -n ${_VERBOSE} ]]; then
  _O_REDIRECT="/dev/stdout"
fi

_do() {
  set -- "${@}"
  echo ">>>" "${@}"
  "${@}" >${_O_REDIRECT}
}

_is_in_mod() {
  if ! go list >${_O_REDIRECT}; then
    echo "'${_MOD_DIR}' is not a module folder." >&2
    exit 1
  fi

  _MOD_DIR=$(go list -f '{{.GoMod}}' -m)
  _MOD_DIR=$(realpath ${_MOD_DIR%/go.mod})

  if [[ "$(go list -f '{{.Main}}' -m)" != true ]]; then
    echo "'${_MOD_DIR}' contains a non-main module." >&2
    exit 1
  fi
  return 0
}

_is_dir() {
  if [[ -d "${1}" ]]; then
    return 0
  else
    echo "'${1}' is not a directory, abort." >&2
    exit 1
  fi
}

# for git only
_is_in_vcs() {
  if git status &>/dev/null; then
    return 0
  else
    return 1
  fi
}

[[ -z ${_MOD_DIR} ]] || _do pushd "${_MOD_DIR}"
_is_in_mod

if [[ -z ${_VCS_DIR} || ${_VCS_DIR} == ${_MOD_DIR} ]]; then
  if [[ -n ${_VCS_DIR} ]]; then
    echo "the specified VCS dir is the same as PKG dir, do as VCS path omitted" >&2
  fi
  unset _VCS_DIR _AUTOGEN _VERSION
else
  _is_dir "${_VCS_DIR}"
fi

# generated VCS path
if [[ -n ${_AUTOGEN} ]]; then
  _MOD_PATH=$(go list -f '{{.Path}}' -m)
  if [[ ${_MOD_PATH##*/} =~ ^v[[:digit:]] ]]; then
    _MOD_PATH=${_MOD_PATH%/*}
  fi
  _VCS_DIR="${_VCS_DIR%/}/${_MOD_PATH##*/}-vendor"
  [[ -d "${_VCS_DIR}" ]] || _do mkdir -p "${_VCS_DIR}"
fi

_VENDOR="${_VCS_DIR%/}${_VCS_DIR:+/}vendor"
echo "will
 1. remove '${_VENDOR}' directory
 2. re-generate it"
if [[ -n ${_VERSION} ]]; then
  echo " 3. make tag with version '${_VERSION}'"
  if [[ -n ${_PUSH} ]]; then
    echo " 4. push with args '${_PUSH_ARGS% }'"
  fi
fi
echo
_WAIT=3
echo -en "Starting in: \033[33m\033[1m"
while [[ ${_WAIT} -gt 0 ]]; do
  echo -en "${_WAIT} "
  _WAIT=$((${_WAIT} -  1))
  sleep 1
done
echo -e "\033[0m"

_do go mod verify
_do go mod tidy ${_VERBOSE:+-v} ${_GO_VER:+-go} ${_GO_VER}

[[ ! -d ${_VENDOR} ]] || _do rm -rf ${_VENDOR}
_do go mod vendor ${_VERBOSE:+-v} ${_VCS_DIR:+-o} ${_VCS_DIR:+${_VENDOR}}

if [[ -z ${_VERSION} ]]; then
  exit
fi

_do pushd "${_VCS_DIR}"
while ! _is_in_vcs; do
  read -p "Please manually do \`git init '${_VCS_DIR}'\` first, and than press <Enter> to continue: "
done
_do git add ./vendor
if [[ $(git log --oneline ./vendor 2>/dev/null | wc -l | cut -d' ' -f1) == 0 ]]; then
  _commit_msg_prefix="add"
else
  _commit_msg_prefix="update"
fi
if [[ $(git diff --cached ./vendor) == '' ]]; then
  echo "no changed, skip git commit and following actions."
  exit 1
fi
_do git commit -m "vendor: ${_commit_msg_prefix} ${_VERSION}"
_do git tag -a "v${_VERSION#v}" -m "v${_VERSION#v}"

[[ -n ${_PUSH} ]] || exit

_do git push ${_PUSH_ARGS}
